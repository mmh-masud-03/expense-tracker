"use client";
import { useState, useEffect } from "react";
import { Bar, Pie } from "react-chartjs-2";
import jsPDF from "jspdf";

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import { GetAllExpenses } from "@/utils/helper";
import { useSession } from "next-auth/react";
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

// Define colors for each category
const categoryColors = {
  Food: "#FF6384", // Red
  Travel: "#36A2EB", // Blue
  Bills: "#FFCE56", // Yellow
  Entertainment: "#4BC0C0", // Teal
  Education: "#9966FF", // Purple
  Healthcare: "#FF9F40", // Orange
  Shopping: "#E7E9AC", // Light Green
  Utilities: "#C9CBCF", // Gray
  Transport: "#FF6347", // Tomato
  Housing: "#40E0D0", // Turquoise
  Clothing: "#FFD700", // Gold
  Insurance: "#ADFF2F", // Green Yellow
  Debt_Repayment: "#FF69B4", // Hot Pink
  Personal_Care: "#7B68EE", // Medium Slate Blue
  Gifts_and_Donations: "#FF4500", // Orange Red
  Childcare: "#DA70D6", // Orchid
  Pet_Care: "#C71585", // Medium Violet Red
  Subscriptions: "#00FA9A", // Medium Spring Green
  Emergency: "#FF1493", // Deep Pink
  Festivals_and_Celebrations: "#1E90FF", // Dodger Blue
  Technology: "#32CD32", // Lime Green
  Miscellaneous: "#8A2BE2", // Blue Violet
  Others: "#A9A9A9", // Dark Gray
};

export default function ExpenseReport() {
  const [expenseData, setExpenseData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { data: session } = useSession();
  const username = session?.user?.name;
  const email = session?.user?.email;

  const generatePDF = () => {
    const doc = new jsPDF();
    let yOffset = 20;
    const pageWidth = doc.internal.pageSize.width;

    // Helper function for centered text
    const centeredText = (text, y) => {
      const textWidth =
        (doc.getStringUnitWidth(text) * doc.internal.getFontSize()) /
        doc.internal.scaleFactor;
      const textOffset = (pageWidth - textWidth) / 2;
      doc.text(text, textOffset, y);
    };

    // Add title
    doc.setFontSize(24);
    doc.setTextColor(44, 62, 80); // Dark blue
    centeredText("Expense Report", yOffset);
    yOffset += 15;

    // Add user info
    doc.setFontSize(12);
    doc.setTextColor(52, 73, 94); // Slightly lighter blue
    centeredText(`Generated by: ${username}`, yOffset);
    yOffset += 7;
    centeredText(`Email: ${email}`, yOffset);
    yOffset += 15;

    // Add summary
    doc.setFillColor(236, 240, 241); // Light gray background
    doc.rect(20, yOffset, pageWidth - 40, 30, "F");
    yOffset += 5;

    doc.setFontSize(14);
    doc.setTextColor(44, 62, 80); // Dark blue
    doc.text(
      `Total Expenses: BDT ${totalExpense.toFixed(2)}`,
      25,
      yOffset + 10
    );
    doc.text(
      `Highest Expense Category: ${highestExpenseCategory}`,
      25,
      yOffset + 20
    );
    yOffset += 40;

    // Add expense details
    doc.setFontSize(16);
    doc.setTextColor(44, 62, 80); // Dark blue
    doc.text("Expense Details:", 20, yOffset);
    yOffset += 10;

    // Table header
    const tableHeaders = ["No.", "Title", "Amount (BDT)", "Category"];
    const columnWidths = [20, 70, 50, 50];

    doc.setFillColor(52, 152, 219); // Light blue header
    doc.rect(20, yOffset, pageWidth - 40, 10, "F");
    doc.setTextColor(255, 255, 255); // White text
    doc.setFontSize(12);

    let xOffset = 20;
    tableHeaders.forEach((header, index) => {
      doc.text(header, xOffset + 2, yOffset + 7);
      xOffset += columnWidths[index];
    });
    yOffset += 15;

    // Table rows
    doc.setTextColor(44, 62, 80); // Dark blue text
    expenseData.forEach((expense, index) => {
      if (yOffset > 270) {
        doc.addPage();
        yOffset = 20;
      }

      xOffset = 20;
      if (index % 2 === 0) {
        doc.setFillColor(236, 240, 241); // Light gray for even rows
        doc.rect(20, yOffset - 5, pageWidth - 40, 10, "F");
      }

      doc.text((index + 1).toString(), xOffset + 2, yOffset);
      xOffset += columnWidths[0];
      doc.text(expense.title, xOffset + 2, yOffset);
      xOffset += columnWidths[1];
      doc.text(expense.amount.toFixed(2), xOffset + 2, yOffset);
      xOffset += columnWidths[2];
      doc.text(expense.category, xOffset + 2, yOffset);

      yOffset += 10;
    });

    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(127, 140, 141); // Gray text
      doc.text(
        `Page ${i} of ${pageCount}`,
        pageWidth - 40,
        doc.internal.pageSize.height - 10
      );
    }

    // Save the PDF
    doc.save(`expense_report_${username}.pdf`);
  };

  useEffect(() => {
    const fetchExpenseData = async () => {
      try {
        const { expenses } = await GetAllExpenses({
          sortBy: "amount", // Adjust sorting criteria as needed
          sortOrder: "desc", // Sort in descending order
        });
        setExpenseData(expenses);
      } catch (err) {
        setError("Failed to fetch expense data.");
        console.error("Error fetching expense data:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchExpenseData();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64 bg-white rounded shadow-md">
        <div className="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-16 w-16"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 mb-6 bg-white rounded shadow-md text-red-500">
        Error: {error}
      </div>
    );
  }

  if (expenseData.length === 0) {
    return (
      <div className="p-4 mb-6 bg-white rounded shadow-md">
        No expense data available
      </div>
    );
  }

  // Prepare data for charts
  const categories = [
    ...new Set(expenseData.map((expense) => expense.category)),
  ];
  const categoryTotals = categories.map((category) =>
    expenseData
      .filter((expense) => expense.category === category)
      .reduce((sum, expense) => sum + expense.amount, 0)
  );

  const totalExpense = categoryTotals.reduce((sum, total) => sum + total, 0);
  const highestExpenseCategory =
    categories[categoryTotals.indexOf(Math.max(...categoryTotals))];

  const colors = categories.map(
    (category) => categoryColors[category] || "#A9A9A9"
  ); // Default color if not found

  const barData = {
    labels: categories,
    datasets: [
      {
        label: "Expenses",
        data: categoryTotals,
        backgroundColor: colors,
        borderColor: colors.map((color) => color),
        borderWidth: 1,
      },
    ],
  };

  const pieData = {
    labels: categories,
    datasets: [
      {
        label: "Expenses",
        data: categoryTotals,
        backgroundColor: colors,
      },
    ],
  };

  return (
    <div className="p-6 container mx-auto relative mb-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold text-gray-700 mb-6">Expense Report</h2>
      <button
        onClick={generatePDF}
        className="absolute right-3 top-6 mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
      >
        Download Report
      </button>
      {/* Summary Section */}
      <div className="mb-6">
        <h3 className="text-xl font-semibold text-gray-600 mb-2">Summary</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="p-4 bg-gray-100 rounded shadow">
            <p className="text-lg font-medium">Total Expenses</p>
            <p className="text-2xl font-bold text-red-600">
              BDT {totalExpense.toFixed(2)}
            </p>
          </div>
          <div className="p-4 bg-gray-100 rounded shadow">
            <p className="text-lg font-medium">Highest Expense Category</p>
            <p className="text-2xl font-bold text-red-600">
              {highestExpenseCategory}
            </p>
          </div>
        </div>
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h3 className="text-lg font-semibold text-gray-600 mb-4">
            Bar Chart
          </h3>
          <div className="relative h-64">
            <Bar
              data={barData}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: "top" },
                  tooltip: {
                    callbacks: {
                      label: (tooltipItem) => `Amount: ${tooltipItem.raw} Tk`,
                    },
                  },
                },
              }}
            />
          </div>
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-600 mb-4">
            Pie Chart
          </h3>
          <div className="relative h-64">
            <Pie
              data={pieData}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: "top" },
                  tooltip: {
                    callbacks: {
                      label: (tooltipItem) => `Amount: ${tooltipItem.raw} Tk`,
                    },
                  },
                },
              }}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

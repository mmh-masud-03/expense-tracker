"use client";
import { useState, useEffect } from "react";
import { Bar, Pie } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import jsPDF from "jspdf";
import { useSession } from "next-auth/react";
import { FaCalendarAlt, FaDownload } from "react-icons/fa";
import ImprovedDatePicker from "../ImprovedDatePicker";
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

export default function IncomeReport() {
  const [incomeData, setIncomeData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const { data: session } = useSession();
  const username = session?.user?.name;
  const email = session?.user?.email;
  useEffect(() => {
    const fetchIncomeData = async () => {
      try {
        const res = await fetch(
          `/api/reports/income?startDate=${startDate}&endDate=${endDate}`
        );
        const { incomes } = await res.json();
        setIncomeData(incomes);
      } catch (err) {
        setError("Failed to fetch income data.");
        console.error("Error fetching income data:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchIncomeData();
  }, [startDate, endDate]);

  const generatePDF = () => {
    const doc = new jsPDF();
    let yOffset = 20;
    const pageWidth = doc.internal.pageSize.width;

    // Helper function for centered text
    const centeredText = (text, y) => {
      const textWidth =
        (doc.getStringUnitWidth(text) * doc.internal.getFontSize()) /
        doc.internal.scaleFactor;
      const textOffset = (pageWidth - textWidth) / 2;
      doc.text(text, textOffset, y);
    };

    // Add title
    doc.setFontSize(24);
    doc.setTextColor(46, 139, 87); // Sea Green
    centeredText("Income Report", yOffset);
    yOffset += 10;

    // Add user info
    doc.setFontSize(12);
    doc.setTextColor(34, 139, 34); // Forest Green
    centeredText(`Generated by: ${username}`, yOffset);
    yOffset += 7;
    centeredText(`Email: ${email}`, yOffset);
    yOffset += 8;

    doc.setFontSize(12);
    doc.setTextColor(34, 139, 34); // Forest Green
    centeredText(
      `Date Range: ${
        startDate !== "" || endDate !== ""
          ? `${startDate} to ${endDate}`
          : "All Data"
      }`,
      yOffset
    );
    yOffset += 15;

    // Add summary
    doc.setFillColor(240, 255, 240); // Honeydew background
    doc.rect(20, yOffset, pageWidth - 40, 30, "F");
    yOffset += 5;

    doc.setFontSize(14);
    doc.setTextColor(34, 139, 34); // Forest Green
    doc.text(`Total Income: BDT ${totalIncome.toFixed(2)}`, 25, yOffset + 10);
    doc.text(
      `Highest Income Category: ${highestIncomeCategory}`,
      25,
      yOffset + 20
    );
    yOffset += 40;

    // Add income details
    doc.setFontSize(16);
    doc.setTextColor(46, 139, 87); // Sea Green
    doc.text("Income Details:", 20, yOffset);
    yOffset += 10;

    // Table header
    const tableHeaders = ["No.", "Title", "Amount (Tk)", "Category"];
    const columnWidths = [20, 60, 33, 52];

    doc.setFillColor(60, 179, 113); // Medium Sea Green header
    doc.rect(20, yOffset, pageWidth - 40, 10, "F");
    doc.setTextColor(255, 255, 255); // White text
    doc.setFontSize(12);

    let xOffset = 20;
    tableHeaders.forEach((header, index) => {
      doc.text(header, xOffset + 2, yOffset + 7);
      xOffset += columnWidths[index];
    });
    yOffset += 15;

    // Table rows
    doc.setTextColor(0, 100, 0); // Dark Green text
    incomeData.forEach((income, index) => {
      if (yOffset > 270) {
        doc.addPage();
        yOffset = 20;
      }

      xOffset = 20;
      if (index % 2 === 0) {
        doc.setFillColor(240, 255, 240); // Honeydew for even rows
        doc.rect(20, yOffset - 5, pageWidth - 40, 10, "F");
      }

      doc.text((index + 1).toString(), xOffset + 2, yOffset);
      xOffset += columnWidths[0];
      doc.text(income.title, xOffset + 2, yOffset);
      xOffset += columnWidths[1];
      doc.text(income.amount.toFixed(2), xOffset + 2, yOffset);
      xOffset += columnWidths[2];
      doc.text(income.category, xOffset + 2, yOffset);

      yOffset += 10;
    });

    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(9);
      doc.setTextColor(119, 136, 153); // Light Slate Gray
      doc.text(
        `Page ${i} of ${pageCount}`,
        pageWidth - 40,
        doc.internal.pageSize.height - 10
      );
    }

    // Save the PDF
    doc.save(`income_report_${username}.pdf`);
  };
  if (loading) {
    return (
      <div className="container mx-auto flex justify-center items-center h-64 bg-white rounded shadow-md">
        <div className="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-16 w-16"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-4 mb-6 bg-white rounded shadow-md text-red-500">
        Error: {error}
      </div>
    );
  }

  if (incomeData.length === 0) {
    return (
      <div className="p-4 mb-6 bg-white rounded shadow-md">
        No income data available
      </div>
    );
  }

  // Prepare data for charts
  const categories = [...new Set(incomeData.map((income) => income.category))];
  const categoryTotals = categories.map((category) =>
    incomeData
      .filter((income) => income.category === category)
      .reduce((sum, income) => sum + income.amount, 0)
  );

  const totalIncome = categoryTotals.reduce((sum, total) => sum + total, 0);
  const highestIncomeCategory =
    categories[categoryTotals.indexOf(Math.max(...categoryTotals))];

  const barData = {
    labels: categories,
    datasets: [
      {
        label: "Income",
        data: categoryTotals,
        backgroundColor: [
          "#FF6384",
          "#36A2EB",
          "#FFCE56",
          "#4BC0C0",
          "#9966FF",
          "#FF9F40",
          "#FFBD6B",
          "#C9CBCF",
          "#FF6F61",
          "#6B5B95",
          "#D3B8AE",
          "#FFB3E6",
          "#C4E17F",
          "#F7D6E0",
          "#C4E17F",
          "#D0E0D0",
          "#F3C6D0",
          "#E0B0FF",
          "#FF4D4D",
          "#7D8C7E",
          "#E6D5D5",
          "#9B9B77",
        ],
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1,
      },
    ],
  };

  const pieData = {
    labels: categories,
    datasets: [
      {
        label: "Income",
        data: categoryTotals,
        backgroundColor: [
          "#FF6384",
          "#36A2EB",
          "#FFCE56",
          "#4BC0C0",
          "#9966FF",
          "#FF9F40",
          "#FFBD6B",
          "#C9CBCF",
          "#FF6F61",
          "#6B5B95",
          "#D3B8AE",
          "#FFB3E6",
          "#C4E17F",
          "#F7D6E0",
          "#C4E17F",
          "#D0E0D0",
          "#F3C6D0",
          "#E0B0FF",
          "#FF4D4D",
          "#7D8C7E",
          "#E6D5D5",
          "#9B9B77",
        ],
      },
    ],
  };

  return (
    <div className="container mx-auto relative p-6 mb-6 bg-slate-100 rounded-lg shadow-md">
      <h2 className="text-3xl font-bold text-gray-700  text-center mb-12">
        Income Report
      </h2>
      <div className="hidden mb-10 md:flex flex-row justify-between items-center">
        <div className=" w-full lg:w-2/3">
          <ImprovedDatePicker
            startDate={startDate}
            endDate={endDate}
            setStartDate={setStartDate}
            setEndDate={setEndDate}
          />
        </div>
        <div className="hidden md:flex h-12 mt-8">
          <button
            onClick={generatePDF}
            className=" px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          >
            Download Report
          </button>
        </div>
      </div>
      {/* Summary Section */}
      <div className="mb-10">
        <h3 className="text-xl font-semibold text-gray-600 mb-2">Summary</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="p-4 bg-gray-100 rounded shadow">
            <p className="text-lg font-medium">Date Range</p>
            <p className="text-xl font-bold text-green-600">
              {startDate}{" "}
              {startDate === "" ? (
                <span>Select a date range</span>
              ) : (
                <span> to</span>
              )}
              {endDate}
            </p>
          </div>
          <div className="p-4 bg-gray-100 rounded shadow">
            <p className="text-lg font-medium">Total Income</p>
            <p className="text-2xl font-bold text-green-600">
              BDT {totalIncome.toFixed(2)}
            </p>
          </div>
          <div className="p-4 bg-gray-100 rounded shadow">
            <p className="text-lg font-medium">Highest Income Category</p>
            <p className="text-2xl font-bold text-green-600">
              {highestIncomeCategory}
            </p>
          </div>
        </div>
      </div>
      {/* Charts Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h3 className="text-lg font-semibold text-gray-600 mb-4">
            Income by Category
          </h3>
          <div className="relative h-64">
            <Bar
              data={barData}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: "top" },
                  tooltip: {
                    callbacks: {
                      label: (tooltipItem) => `Amount: ${tooltipItem.raw} Tk`,
                    },
                  },
                },
              }}
            />
          </div>
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-600 mb-4">
            Income by Category (Pie Chart)
          </h3>
          <div className="relative h-64">
            <Pie
              data={pieData}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: "top" },
                  tooltip: {
                    callbacks: {
                      label: (tooltipItem) => `Amount: ${tooltipItem.raw} Tk`,
                    },
                  },
                },
              }}
            />
          </div>
        </div>
      </div>
      <div className="md:hidden mt-8">
        <button
          onClick={generatePDF}
          className="absolute right-0 left-0 bottom-0 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
        >
          Download Report
        </button>
      </div>
    </div>
  );
}
